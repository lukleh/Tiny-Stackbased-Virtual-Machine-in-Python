
# bubble sort
# return integer array sorted
# input: integer array
# example:
# array = [5,2,3,1,4]
# result = [1,2,3,4,5]

func:
    name: sort array
    args:
        - label: array
          type: intarray
    type: intarray

lvars:
    - label: index
      type: int
    - label: swapped
      type: int
    - label: length
      type: int
    - label: tmp
      type: int

ins:
    - aload: array
    - arraylength
    - istore: length  # length = 0
    - label: newpass
    - ipush: 0
    - dup
    - istore: swapped  # swapped = false
    - istore: index  # index = 0
    - label: startloop
    - iload: index
    - ipush: 1
    - iadd
    - dup
    - istore: index  # index += 1
    - iload: length
    - if_icmpeq: endloop  # if index == length: loop is over
    - aload: array
    - iload: index
    - iaload
    - aload: array
    - iload: index
    - ipush: 1
    - isub
    - iaload
    - if_icmpge: startloop  # if array[i] >= array[i - 1], move to next element
    - aload: array
    - iload: index
    - ipush: 1
    - isub
    - iaload
    - istore: tmp  # tmp = array[i - 1]

    - aload: array
    - iload: index
    - ipush: 1
    - isub
    - aload: array
    - iload: index
    - iaload
    - iastore  # index[i - 1] = index[i]

    - aload: array
    - iload: index
    - iload: tmp
    - iastore  # index[i] = tmp

    - ipush: 1
    - istore: swapped  # swapped = true
    - goto: startloop  # move to next element

    - label: endloop
    - iload: swapped
    - ipush: 0
    - if_icmpne: newpass  # if swapped == true, start sorting array again
    - aload: array
    - areturn  # las pass did not swap any elements, array is sorted, return it